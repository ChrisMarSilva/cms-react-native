
---------------------------------------------------------
---------------------------------------------------------

NOTIFICAÃ‡ÃƒO

expo install expo-permissions
expo install expo-notifications
npm install --save react-native-onesignal



import React, { Component, useState, useEffect, useRef,  } from 'react'
import { StatusBar } from 'expo-status-bar'
import { StyleSheet, View, ScrollView, Text, Button, Vibration, Platform, } from 'react-native'
import { LogBox } from 'react-native';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

LogBox.ignoreLogs(['Warning: ...']);
LogBox.ignoreAllLogs(true);

//console.ignoredYellowBox = ['Warning: Each', 'Warning: Failed'];
//console.disableYellowBox = true;

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({ content: { title: "TITULO ðŸ“¬", body: 'MENSAGEM', data: { data: 'goes here' }, }, trigger: { seconds: 2 }, });
}

async function registerForPushNotificationsAsync() {
  let token;
  if (Constants.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    token = (await Notifications.getExpoPushTokenAsync()).data;
    console.log(token);
  } else {
    alert('Must use physical device for Push Notifications');
  }

  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', { name: 'default', importance: Notifications.AndroidImportance.MAX, vibrationPattern: [0, 250, 250, 250], lightColor: '#FF231F7C', });
  }

  return token;
}

export default function App() {
//export default class App extends React.Component {
  
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);
  const notificationListener = useRef();
  const responseListener = useRef();
  
  useEffect(() => {
    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => { setNotification(notification); });
    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => { console.log(response); });
    return () => {
      Notifications.removeNotificationSubscription(notificationListener);
      Notifications.removeNotificationSubscription(responseListener);
    };
  }, []);

  return (
  <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around', }}>
    <Text>Your expo push token: {expoPushToken}</Text>
    <View style={{ alignItems: 'center', justifyContent: 'center' }}>
      <Text>Title: {notification && notification.request.content.title} </Text>
      <Text>Body: {notification && notification.request.content.body}</Text>
      <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
    </View>
    <Button title="Press to schedule a notification" onPress={async () => { await schedulePushNotification(); }} />
  </View>
  )

}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', alignItems: 'center', justifyContent: 'center',  },
})
