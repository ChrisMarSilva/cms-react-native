
---------------------------------------------------------
---------------------------------------------------------


FACE ID e TOUCH ID

expo install expo-local-authentication
npm i --save react-native-touch-id
react-native link react-native-touch-id



import React, { Component, useState, useEffect, useRef,  } from 'react'
import { StatusBar } from 'expo-status-bar'
import { StyleSheet, View, ScrollView, Text, Button, Vibration, Platform, Modal, TouchableHighlight, Image, } from 'react-native'
import { LogBox } from 'react-native';
import Constants from 'expo-constants';
import * as LocalAuthentication from 'expo-local-authentication';

LogBox.ignoreLogs(['Warning: ...']);
LogBox.ignoreAllLogs(true);

//console.ignoredYellowBox = ['Warning: Each', 'Warning: Failed'];
//console.disableYellowBox = true;

export default class App extends React.Component {

   state = {
      authenticated: false,
      modalVisible: false,
      failedCount: 0,
    };

  setModalVisible(visible) {
    this.setState({ modalVisible: visible });
  }

  clearState = () => {
    this.setState({ authenticated: false, failedCount: 0 });
  };

  scanFingerPrint = async () => {
    try {
      let results = await LocalAuthentication.authenticateAsync();
      if (results.success) {
        this.setState({ modalVisible: false, authenticated: true, failedCount: 0, });
      } else {
        this.setState({ failedCount: this.state.failedCount + 1, });
      }
    } catch (e) {
      console.log(e);
    }
  };

  render() {
    return (
      <View style={[ styles.container, this.state.modalVisible ? { backgroundColor: '#b7b7b7' } : { backgroundColor: 'white' }, ]}>
        
        <Button title={this.state.authenticated ? 'Reset and begin Authentication again' : 'Begin Authentication'} onPress={() => { this.clearState(); if (Platform.OS === 'android') { this.setModalVisible(!this.state.modalVisible); } else { this.scanFingerPrint(); } }} />

        {this.state.authenticated && <Text style={styles.text}>Authentication Successful! ðŸŽ‰</Text>}

        <Modal animationType="slide" transparent={true} visible={this.state.modalVisible} onShow={this.scanFingerPrint}>
          <View style={styles.modal}>
            <View style={styles.innerContainer}>
              <Text>Sign in with fingerprint</Text>
              <Image style={{ width: 128, height: 128 }} source={require('./assets/fingerprint.png')} />
              {this.state.failedCount > 0 && (
                <Text style={{ color: 'red', fontSize: 14 }}> Failed to authenticate, press cancel and try again. </Text>
              )}
              <TouchableHighlight onPress={async () => { LocalAuthentication.cancelAuthenticate(); this.setModalVisible(!this.state.modalVisible); }}>
                <Text style={{ color: 'red', fontSize: 16 }}>Cancel</Text>
              </TouchableHighlight>
            </View>
          </View>
        </Modal>
        
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', alignItems: 'center', justifyContent: 'center',  alignContent: 'center',  paddingTop: Constants.statusBarHeight, padding: 8, },
  innerContainer: { marginTop: '30%', flex: 1, justifyContent: 'center', alignItems: 'center', },
  text: { alignSelf: 'center', fontSize: 22, paddingTop: 20, },
  modal: {  flex: 1, marginTop: '90%', backgroundColor: '#E5E5E5',  justifyContent: 'center', alignItems: 'center', },
})


import React, { Component, useState, useEffect, useRef,  } from 'react'
import { StatusBar } from 'expo-status-bar'
import { StyleSheet, View, ScrollView, Text, Button, Vibration, Platform, Modal, TouchableOpacity, TouchableHighlight, Image, Alert, } from 'react-native'
import { LogBox } from 'react-native';
import Constants from 'expo-constants';
import TouchID from 'react-native-touch-id';

LogBox.ignoreLogs(['Warning: ...']);
LogBox.ignoreAllLogs(true);
//console.ignoredYellowBox = ['Warning: Each', 'Warning: Failed'];
//console.disableYellowBox = true;
export default class App extends React.Component {
  
  _pressHandler() {
    const optionalConfigObject = { title: 'Authentication Required', color: '#e00606' };
    TouchID.authenticate('to demo this react-native component', optionalConfigObject)
      .then(success => { Alert.alert('Authenticated Successfully'); })
      .catch(error => { Alert.alert('Authentication Failed'); });
  };
  
  _testSupport() {
    TouchID.isSupported()
      .then(supported => { Alert.alert('Touch ID supported'); })
      .catch(error => { Alert.alert('Touch ID not support'); });
  }

  render() {
    return (
     <View style={styles.container}>

        <View style={{ }}>
            <Text>CMS Teste #333</Text>
            <StatusBar style="auto" backgroundColor="red"/>
        </View>

        <TouchableOpacity style={{ alignItems: "center", backgroundColor: "blue", padding: 10, }} onPress={this._pressHandler}>
          <Text style={{ color: "white",  fontWeight: 'bold',  fontSize: 20, }}>Authenticate with Touch ID</Text>
        </TouchableOpacity>

        <TouchableHighlight style={{ alignItems: "center", backgroundColor: "red", padding: 10, }}  onPress={this._testSupport}>
          <Text  style={{ color: "white",  fontWeight: 'bold',  fontSize: 20, }}> Test Support </Text>
        </TouchableHighlight>

    </View>
    );
  }

}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', alignItems: 'center', justifyContent: 'center',  alignContent: 'center',  paddingTop: Constants.statusBarHeight, padding: 8, },
})

